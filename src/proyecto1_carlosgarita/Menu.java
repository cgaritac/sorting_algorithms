/*
Universidad: UNED
Curso:        Estructura de Datos 
Código:       00825
Tema:         Proyecto 1
Estudiante:   Carlos Garita Campos
Periodo:      II Cuatrimestre 2020
 */
package proyecto1_carlosgarita;

//Importación de los paquetes que manejan diferentes funciones del programa
import javax.swing.JOptionPane;

//Clase "Menú" para desarrollar el menú general del programa de forma gráfica para la interfaz de usuario
public class Menu extends javax.swing.JFrame {

    //Declaración de las variables de instancia
    private int[] listaAleatoria = new int[2000];
    private int[] numOrdenados = new int[2000];
    private boolean ordenado = false;

    //Constructor 
    public Menu() {
        initComponents(); //Carga todo los objetos que halla en el JFrame          
        this.setLocationRelativeTo(null); //Posiciona el JFrame en el centro de la pantalla       

        //Asignación de radioButtons a un buttonGroup
        this.btgMetodos.add(this.rdbBurbuja);
        this.btgMetodos.add(this.rdbShellsort);
        this.btgMetodos.add(this.rdbQuicksort);
        this.btgMetodos.add(this.rdbTabla);
    }

    //Método para generar los números aleatorios y almacenarlos en el arreglo respectivo
    public void GenerarAleatorios() {

        //Declaración de variables locales
        int numAleatorio;
        String texto = "";

        //Ciclo for para recorrer el arreglo y asignar los valores de los números aleatorios
        for (int i = 0; i < 2000; i++) {

            //Genera los números aleatorios entre 1 y 9999 y los asigna a la variable "numAleatorio"
            numAleatorio = (int) (Math.random() * 9999) + 1;

            //Asigna al arreglo el valor del número aleatorio en la posición "i"
            listaAleatoria[i] = numAleatorio;

            //Asigna el valor del número aleatorio en la posición "i" del arreglo como cadena de texto a la variable "texto"
            texto += listaAleatoria[i] + "\n";
        }

        //Copia el arreglo "listaAleatoria" en el arreglo "numOrdenados"
        System.arraycopy(this.listaAleatoria, 0, numOrdenados, 0, 2000);

        //Asigna la cadena de texto de la variable "texto" al cuadro de área de texto para mostrar los números aleatorios en pantalla
        this.txaRespuesta.setText(texto);

        //Asigna el valor "false" a la variable "ordenado"
        this.ordenado = false;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btgMetodos = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txaRespuesta = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        btnAceptar = new javax.swing.JButton();
        btnGenerarAleatorios = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        rdbBurbuja = new javax.swing.JRadioButton();
        rdbShellsort = new javax.swing.JRadioButton();
        rdbQuicksort = new javax.swing.JRadioButton();
        rdbTabla = new javax.swing.JRadioButton();
        btnDeshacer = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txaRespuesta.setColumns(20);
        txaRespuesta.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        txaRespuesta.setRows(5);
        jScrollPane1.setViewportView(txaRespuesta);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Seleccione la opción que desea ejecutar:");

        btnAceptar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnAceptar.setText("Aceptar");
        btnAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAceptarActionPerformed(evt);
            }
        });

        btnGenerarAleatorios.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnGenerarAleatorios.setText("Generar Números Aleatorios");
        btnGenerarAleatorios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerarAleatoriosActionPerformed(evt);
            }
        });

        btnSalir.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        rdbBurbuja.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rdbBurbuja.setText("Método Burbuja");

        rdbShellsort.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rdbShellsort.setText("Método Shellsort");

        rdbQuicksort.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rdbQuicksort.setText("Método Quicksort");

        rdbTabla.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rdbTabla.setText("Tabla Comparativa");

        btnDeshacer.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnDeshacer.setText("Deshacer");
        btnDeshacer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeshacerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(btnGenerarAleatorios)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rdbBurbuja)
                            .addComponent(rdbShellsort))
                        .addGap(24, 24, 24)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rdbQuicksort)
                            .addComponent(rdbTabla))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnDeshacer)
                            .addComponent(btnAceptar))))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(btnSalir)
                        .addGap(196, 196, 196))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(155, 155, 155))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(btnGenerarAleatorios)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAceptar)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rdbBurbuja)
                            .addComponent(rdbQuicksort))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rdbShellsort)
                            .addComponent(rdbTabla)
                            .addComponent(btnDeshacer))))
                .addGap(22, 22, 22)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 497, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSalir)
                .addGap(7, 7, 7))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnGenerarAleatoriosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerarAleatoriosActionPerformed

        //Llama al método "GenerarAleatorios"
        GenerarAleatorios();

        //Muestra mensaje en pantalla 
        JOptionPane.showMessageDialog(this,
                "Lista de números aleatorios creada correctamente!",
                "Exito",
                JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnGenerarAleatoriosActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        //Cierra la ventana y finaliza el programa
        System.exit(0);
    }//GEN-LAST:event_btnSalirActionPerformed

    private void btnAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAceptarActionPerformed

        //Crea el objeto "met" de la clase "Metodos" para tener acceso a los métodos de la clase
        Metodos met = new Metodos(numOrdenados);

        //Condicional que se ejecuta si no se han generado los números aleatorios aún
        if (this.listaAleatoria[0] == 0) {
            //Muestra mensaje en pantalla 
            JOptionPane.showMessageDialog(this,
                    "Es necesario que necesario que genere los números aleatorios antes de continuar",
                    "Alto",
                    JOptionPane.WARNING_MESSAGE);

            //Condicional que se ejecuta si el usuario no ha seleccionado ninguna de las opciones aún
        } else if (!this.rdbBurbuja.isSelected() && !this.rdbShellsort.isSelected() && !this.rdbQuicksort.isSelected() && !this.rdbTabla.isSelected()) {
            //Muestra mensaje en pantalla 
            JOptionPane.showMessageDialog(this,
                    "Es necesario que seleccione una de las opciones para continuar",
                    "Alto",
                    JOptionPane.WARNING_MESSAGE);
        } else {

            //Condicional que se ejecuta si los números ya se encuentran ordenados
            if ((this.rdbBurbuja.isSelected() || this.rdbShellsort.isSelected() || this.rdbQuicksort.isSelected()) && this.ordenado == true) {
                //Muestra mensaje en pantalla 
                JOptionPane.showMessageDialog(this,
                        "La lista se encuentra ordenada, favor genere una nueva lista de números aleatorios antes de continuar con el ordenamiento",
                        "Alto",
                        JOptionPane.WARNING_MESSAGE);
            }

            //Condicional que se ejecuta si el usuario selecciona la opcion de ordenar por el método de Burbuja
            if (this.rdbBurbuja.isSelected() && this.ordenado == false) {

                //Ejecuta el método burbuja del objeto "met" y asigna el resultado al arreglo "listaBurbuja"
                int[] listaBurbuja = met.burbuja();

                //Declaración de variables
                String texto = "";

                //Ciclo for para recorrer el arreglo y asignar los valores de los números aleatorios
                for (int i = 0; i < 2000; i++) {

                    //Asigna el valor del número aleatorio en la posición "i" del arreglo como cadena de texto a la variable "texto"
                    texto += listaBurbuja[i] + "\n";
                }

                //Asigna la cadena de texto de la variable "texto" al cuadro de área de texto para mostrar los números aleatorios en pantalla                
                this.txaRespuesta.setText(texto);

                //Muestra mensaje en pantalla 
                JOptionPane.showMessageDialog(this,
                        "Método Burbuja aplicado correctamente!",
                        "Exito",
                        JOptionPane.INFORMATION_MESSAGE);

                //Asigna el valor "false" a la variable "ordenado"        
                this.ordenado = true;
            }

            //Condicional que se ejecuta si el usuario selecciona la opcion de ordenar por el método de Shellsort
            if (this.rdbShellsort.isSelected() && this.ordenado == false) {

                //Ejecuta el método shell del objeto "met" y asigna el resultado al arreglo "listaShellsort"
                int[] listaShellsort = met.shell();

                //Declaración de variables
                String texto = "";

                //Ciclo for para recorrer el arreglo y asignar los valores de los números aleatorios
                for (int i = 0; i < 2000; i++) {

                    //Asigna el valor del número aleatorio en la posición "i" del arreglo como cadena de texto a la variable "texto"
                    texto += listaShellsort[i] + "\n";
                }

                //Asigna la cadena de texto de la variable "texto" al cuadro de área de texto para mostrar los números aleatorios en pantalla                
                this.txaRespuesta.setText(texto);

                //Muestra mensaje en pantalla 
                JOptionPane.showMessageDialog(this,
                        "Método Shellsort aplicado correctamente!",
                        "Exito",
                        JOptionPane.INFORMATION_MESSAGE);

                //Asigna el valor "false" a la variable "ordenado"        
                this.ordenado = true;
            }

            //Condicional que se ejecuta si el usuario selecciona la opcion de ordenar por el método de Quicksort            
            if (this.rdbQuicksort.isSelected() && this.ordenado == false) {

                //Ejecuta el método quick del objeto "met" y asigna el resultado al arreglo "listaQuicksort"
                int[] listaQuicksort = met.quick(0, this.numOrdenados.length - 1);

                //Declaración de variables            
                String texto = "";

                //Ciclo for para recorrer el arreglo y asignar los valores de los números aleatorios                
                for (int i = 0; i < 2000; i++) {

                    //Asigna el valor del número aleatorio en la posición "i" del arreglo como cadena de texto a la variable "texto"
                    texto += listaQuicksort[i] + "\n";
                }

                //Asigna la cadena de texto de la variable "texto" al cuadro de área de texto para mostrar los números aleatorios en pantalla                
                this.txaRespuesta.setText(texto);

                //Muestra mensaje en pantalla 
                JOptionPane.showMessageDialog(this,
                        "Método Shellsort aplicado correctamente!",
                        "Exito",
                        JOptionPane.INFORMATION_MESSAGE);

                //Asigna el valor "false" a la variable "ordenado"        
                this.ordenado = true;
            }

            //Condicional que se ejecuta si el usuario selecciona la opcion de Tabla Comparativa
            if (this.rdbTabla.isSelected()) {

                //Declaración de variables                
                long inicio, fin;
                double tBurbuja, tShellsort, tQuicksort;

                //Determina el valor de tiempo en nanosegundos y lo asigna a la variable "inicio"
                inicio = System.nanoTime();

                //Ejecuta el método burbuja del objeto "met"
                met.burbuja();

                //Determina el valor de tiempo en nanosegundos y lo asigna a la variable "fin"
                fin = System.nanoTime();

                //Resta el valor de tiempo inicial al valor final de tiempo, lo convierte a segundos y lo asigna a la variable correspondiente
                tBurbuja = (double) (fin - inicio) * 1.0e-9;

                //Determina el valor de tiempo en nanosegundos y lo asigna a la variable "inicio"
                inicio = System.nanoTime();

                //Copia el arreglo "listaAleatoria" en el arreglo "numOrdenados"
                System.arraycopy(this.listaAleatoria, 0, numOrdenados, 0, 2000);

                //Ejecuta el método shell del objeto "met"
                met.shell();

                //Determina el valor de tiempo en nanosegundos y lo asigna a la variable "fin"
                fin = System.nanoTime();

                //Resta el valor de tiempo inicial al valor final de tiempo, lo convierte a segundos y lo asigna a la variable correspondiente
                tShellsort = (double) (fin - inicio) * 1.0e-9;

                //Copia el arreglo "listaAleatoria" en el arreglo "numOrdenados"
                System.arraycopy(this.listaAleatoria, 0, numOrdenados, 0, 2000);

                //Determina el valor de tiempo en nanosegundos y lo asigna a la variable "inicio"
                inicio = System.nanoTime();

                //Ejecuta el método quick del objeto "met"
                met.quick(0, this.numOrdenados.length - 1);

                //Determina el valor de tiempo en nanosegundos y lo asigna a la variable "fin"
                fin = System.nanoTime();

                //Resta el valor de tiempo inicial al valor final de tiempo, lo convierte a segundos y lo asigna a la variable correspondiente
                tQuicksort = (double) (fin - inicio) * 1.0e-9;

                /* Crea el objeto ventana para mostrar el JDialog Tabla, y se indica "this" para hacer referencia al padre y "true" para indicar que es modal
                en otras palabras que no permite hacer nada más hasta que se cierre la ventana.*/
                Tabla ventana = new Tabla(this, true, tBurbuja, tShellsort, tQuicksort);

                //Hace visible el objeto ventana
                ventana.setVisible(true);
            }
        }
    }//GEN-LAST:event_btnAceptarActionPerformed

    private void btnDeshacerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeshacerActionPerformed

        //Condicional que se ejecuta si no se han generado los números aleatorios aún
        if (this.listaAleatoria[0] == 0) {

            //Muestra mensaje en pantalla         
            JOptionPane.showMessageDialog(this,
                    "Es necesario que necesario que genere los números aleatorios antes de continuar",
                    "Alto",
                    JOptionPane.WARNING_MESSAGE);

            //Condicional que se ejecuta en caso de que los números se encuentren ordenados para volver a mostrar los números aleatorios antes de ser ordenados  
        } else if (this.ordenado == true) {

            //Declaración de variables
            String texto = "";

            //Ciclo for para recorrer el arreglo y asignar los valores de los números aleatorios    
            for (int i = 0; i < 2000; i++) {

                //Asigna el valor del número aleatorio en la posición "i" del arreglo como cadena de texto a la variable "texto"
                texto += listaAleatoria[i] + "\n";
            }

            //Asigna la cadena de texto de la variable "texto" al cuadro de área de texto para mostrar los números aleatorios en pantalla
            this.txaRespuesta.setText(texto);

            //Asigna el valor "false" a la variable "ordenado"
            this.ordenado = false;

            //Muestra mensaje en pantalla         
            JOptionPane.showMessageDialog(this,
                    "Se devolvió al listado de números aleatorios previos al ordenamiento, con exito",
                    "Exito",
                    JOptionPane.INFORMATION_MESSAGE);
        } else {

            //Muestra mensaje en pantalla 
            JOptionPane.showMessageDialog(this,
                    "El listado de números aleatorios ya se encuentra en pantalla",
                    "Alto",
                    JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnDeshacerActionPerformed

    /**
     * @param args the command line arguments
     */
    //Método Main para ejecutar el programa
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Menu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup btgMetodos;
    private javax.swing.JButton btnAceptar;
    private javax.swing.JButton btnDeshacer;
    private javax.swing.JButton btnGenerarAleatorios;
    private javax.swing.JButton btnSalir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton rdbBurbuja;
    private javax.swing.JRadioButton rdbQuicksort;
    private javax.swing.JRadioButton rdbShellsort;
    private javax.swing.JRadioButton rdbTabla;
    private javax.swing.JTextArea txaRespuesta;
    // End of variables declaration//GEN-END:variables
}
